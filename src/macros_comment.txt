// "name": $type[$n]  [(normalized)], ..., from $source_buffer
/*
 * gl.h.vertexAttribPointer(program, vao, attrib_layout {
 *     buffer vbo1 {
 *         float position[4];
 *         normalized uint8 color[3];
 *     },
 * 
 *     buffer normal_vbo {
 *         float normal[3];
 *         byte intensity;
 *     }
 * 
 * 
 *     byte, short, unsigned byte, unsigned short, float, half float, 
 *     int8, int16, uint8, ubyte,  uint16, ushort  float32, float16
 *  => gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT, gl.HALF_FLOAT
 * })
 */

// { attrib_name, component_count, component_type, normalized, stride, offset, source_buffer }

export syntax attrib_layout = function (ctx) {
    let body_ctx = ctx.contextify(ctx.next().value);
    let result = #`[`;
    for (let buffer_ctx of body_ctx) {
        body_ctx.next();
        let buffer_name = body_ctx.next().value;
        let contents = body_ctx.next().value;
        result = result.concat(#`{source_buffer: ${buffer_name}}`);
    }
    result = result.concat(#`]`);
    return result;
};